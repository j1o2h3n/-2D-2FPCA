%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%该程序主要用于训练样本;首先从数据库中读出各类人的手指静脉图像
%然后映射到高维空间中; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear
clc
images=[];
ff=[];
img1=[];
uu1=[];		%定义空矩阵
uu2=[];
m=[];
mm=[];
x=[];
xx=[];
sum1=0;
averg=[];
cc=68; 	%类别数 
ni=25;   %第i类的样本数,这里各类样本的训练样本数都相等
l1=15;	%PCA变换后投影轴的个数
l4=30;	%fisher变换后投影轴的个数

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%读取文件名为1人的手指静脉图片
for j=1:cc
    sum1=0;
	for i=1:ni
		str=strcat('..\train\',(int2str(j)),'\',(int2str(j)),'-',(int2str(i)),'.bmp');%输入图片给str
		img1(:,:,i)=(imread(str));%转为灰度图		Img(:,:,n)中，表示每个图像矩阵
		sum1=sum1+double(img1(:,:,i));%转化为双精度矩阵并求和
	end
	x(:,:,(j-1)*ni+1:j*ni)=img1(:,:,1:ni);%每一类图像的矩阵
	m(:,:,j)=sum1/ni;%计算j类ni人平均图像
	[row low]=size(sum1);
end

%总均值
sum13=0;
for i=1:cc
   sum13=sum13+m(:,:,i); 
end
averge=sum13/cc;%计算所有样本的平均图像
averge233=mat2gray(averge(:,:,:));
imwrite(averge233, 'averge.jpg');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%列去相关 
sum2=0;
for i=1:ni*cc
    temp1=(double(x(:,:,i)-averge)'*double(x(:,:,i)-averge));
    sum2=sum2+temp1 ;
end
COR1=1/(ni*cc)*sum2;	%协方差矩阵
[v,r]=eig(COR1);	%特征向量
[t1,t2]=size(v);

V1=v(:,t2-l1+1:t2);							%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%保存映射矩阵
sum(sum(r(:,t2-l1+1:t2)))/sum(sum(r));		%sum(sum())求矩阵所有元素的和

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%把原数据变换到2DPCA中 
for i=1:cc*ni
	xx(:,:,i)=x(:,:,i)*V1;		%把全部一个个原数据映射到特征空间上再存到新容器里面，给下面LDA做准备
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%计算把特征空间的类均值投影到2DPCA中
xx(:,:,:)=double(xx(:,:,:)); 			%PCA变换的全部升为double类型
images=[];
for c=1:cc 
	mm(:,:,c)=m(:,:,c)*V1;		%每类的平均图像映射到特征空间存起来放容器里面
end
aver=averge*V1;				%所有的平均图像映射到特征空间存起数据
pca=mat2gray(aver(:,:,:));
imwrite(pca, 'pca.jpg');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%对经过PCA变换的数据在行方向上进行fisher变换
for c=1:cc 
	sum2=0;
	for i=ni*(c-1)+1:ni*c
		temp1=(double((xx(:,:,i)-mm(:,:,c)))*double((xx(:,:,i)-mm(:,:,c)))');
		sum2=sum2+temp1 ;
	end
end
kw=sum2/(ni*cc);		%类内协方差矩阵

%把特征空间的总体均值投影到高维空间中
images=[];
sum3=0;  
for i=1:cc
    temp2=double((mm(:,:,i)-aver))*double((mm(:,:,i)-aver))';
    sum3=sum3+temp2 ;  
end
kb=sum3/cc;				%类间协方差矩阵
rank(kw);				%求矩阵的秩

%求广义逆距正得到投影距正v
[v,r]=eig(kb,kw);		%特征向量
t2=size(v);
V2=v(t2-l4+1:t2,:);		%映射矩阵,已转置		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%保存映射矩阵
size(V2);
sum(sum(r(t2-l4+1:t2,:)))/sum(sum(r));	%sum(sum())求矩阵所有元素的和

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%各样本均值行和列方向上分别经过pca和fisher变换后作为训练样本的类中心
for i=1:cc
	averg(:,:,i)=V2*double(m(:,:,i))*V1;      %每类平均图像对应的PCA-LDA特征映射
end
fld=mat2gray(averg(:,:,1));
imwrite(fld, 'fld.jpg');
save('..\data.mat','V1','V2','averg','ni');
%训练结束
err%计算静脉数据库中图像的识别率
